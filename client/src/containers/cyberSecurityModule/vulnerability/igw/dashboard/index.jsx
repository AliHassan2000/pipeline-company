import React, { useState, useEffect, PureComponent } from "react";
import styled from "styled-components";
import { Row, Col, Modal, Table, Button, Spin, Select } from "antd";
import { StyledHeading } from "../../../../../components/paragraph/main.styles";
import {
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
  Tooltip,
  Legend,
} from "recharts";
import axios, { baseUrl } from "../../../../../utils/axios";
import SeverityStack from "./severityStack";
import PnCodeStack from "./pnCodeStack";
import { ArrowRightOutlined } from "@ant-design/icons";
import { columnSearch } from "../../../../../utils";
import useWindowDimensions from "../../../../../hooks/useWindowDimensions";
import { Link } from "react-router-dom";
import CustomPieChartLabel, {
  getTotal,
} from "../../../../../components/graphs";
import MultiSelect from "react-select";
import LineGraph from "./lineGraph";

const Index = (props) => {
  let [cards, setCards] = useState(null);
  let [overallStatus, setOverallStatus] = useState(null);
  let [ednGrcSeverity, setEdnGrcSeverity] = useState(null);
  let [ednVulFixPlanStatus, setEdnVulFixPlanStatus] = useState(null);
  const [technicalContact, setTechnicalContact] = useState([]);
  const [overAllStatus, setOverAllStatus] = useState([]);
  const [technicalContactOptions, setTechnicalContactOptions] = useState([]);
  const [overAllStatusOptions, setOverAllStatusOptions] = useState([]);
  const [grcSeverityVsPNCodeData, setGRCSeverityVsPNCodeData] = useState(null);
  const [grcSeverityVsPNCodeDataKeys, setGRCSeverityVsPNCodeDataKeys] =
    useState([]);

  const [
    grcSeverityVsVulnFixPlanStatusData,
    setGRCSeverityVsVulnFixPlanStatusData,
  ] = useState(null);
  const [
    grcSeverityVsVulnFixPlanStatusDataKeys,
    setGRCSeverityVsVulnFixPlanStatusDataKeys,
  ] = useState([]);
  let [loading, setLoading] = useState(false);

  const COLORS = [
    "#FFA600",
    "#1F618D",
    "#CB4335",
    "#641E16",
    "#229954",
    "#0B5345",
    "#7D3C98",
    "#4A235A",
  ];

  const COLORS2 = ["#F1C40F", "#04E5BE", "#67958D", "#7D3C98"];

  const getOptions = (data) => {
    return data.map((item) => {
      return { label: item, value: item };
    });
  };

  useEffect(() => {
    const serviceCalls = async () => {
      setLoading(true);
      try {
        const tc = await axios.get(
          baseUrl + "/getIgwVulnerabilityTechnicalContact"
        );
        // let tc = {
        //   data: ["All", "tc1", "tc2"],
        // };
        let tco = getOptions(tc.data);
        if (tco.length > 0) {
          setTechnicalContact([tco[0]]);
        }
        setTechnicalContactOptions(tco);

        const os = await axios.get(
          baseUrl + "/getIgwVulnerabilityOverallStatus"
        );
        // let os = {
        //   data: ["All", "os1", "os2"],
        // };
        let oso = getOptions(os.data);
        if (oso.length > 0) {
          setOverAllStatus([oso[0]]);
        }
        setOverAllStatusOptions(oso);

        const res = await axios.get(baseUrl + "/getIgwVulnerabilityCards");
        setCards(res.data);

        const res2 = await axios.get(baseUrl + "/getIgwOverallStatus");
        setOverallStatus(res2.data);

        setLoading(false);
      } catch (err) {
        console.log(err.response);
        setLoading(false);
      }
    };
    serviceCalls();
  }, []);

  useEffect(() => {
    const serviceCalls = async () => {
      let technicalContactValues = technicalContact?.map((item) => {
        return item.value;
      });

      let overAllStatusValues = overAllStatus?.map((item) => {
        return item.value;
      });

      let data = {
        technicalContact: technicalContactValues,
        overAllStatus: overAllStatusValues,
      };

      try {
        if (technicalContact?.length > 0 && overAllStatus.length > 0) {
          // const res3 = await
          axios.post(baseUrl + "/getIgwGrcSeverity", data).then((res) => {
            setEdnGrcSeverity(res.data);
          });
          // setEdnGrcSeverity(res3.data);

          // const res4 = await
          axios.post(baseUrl + "/getIgwVulnFixPlanStatus", data).then((res) => {
            setEdnVulFixPlanStatus(res.data);
          });
          // setEdnVulFixPlanStatus(res4.data);

          // const stack1 = await
          axios
            .post(baseUrl + "/getIgwGRCSeverityVsPNCode", data)
            .then((res) => {
              setGRCSeverityVsPNCodeData(res?.data);
              if (res?.data?.length > 0) {
                let dks = Object.keys(res?.data[0]);
                dks = dks.filter((e) => e !== "name");
                setGRCSeverityVsPNCodeDataKeys(dks);
              }
            });

          // setGRCSeverityVsPNCodeData(stack1?.data);
          // if (stack1?.data?.length > 0) {
          //   let dks = Object.keys(stack1?.data[0]);
          //   dks = dks.filter((e) => e !== "name");
          //   setGRCSeverityVsPNCodeDataKeys(dks);
          // }

          // const stack2 = await
          axios
            .post(baseUrl + "/getIgwGRCSeverityVsVulnFixPlanStatus", data)
            .then((res) => {
              setGRCSeverityVsVulnFixPlanStatusData(res?.data);
              if (res?.data?.length > 0) {
                let dks = Object.keys(res?.data[0]);
                dks = dks.filter((e) => e !== "name");
                setGRCSeverityVsVulnFixPlanStatusDataKeys(dks);
              }
            });
          // setGRCSeverityVsVulnFixPlanStatusData(stack2?.data);
          // if (stack2?.data?.length > 0) {
          //   let dks = Object.keys(stack2?.data[0]);
          //   dks = dks.filter((e) => e !== "name");
          //   setGRCSeverityVsVulnFixPlanStatusDataKeys(dks);
          // }
        }
      } catch (err) {
        console.log(err);
      }
    };
    serviceCalls();
  }, [technicalContact, overAllStatus]);

  const technicalContactSetter = (data) => {
    if (data.length > 0) {
      if (data.length > 1) {
        if (data[0].value === "All") {
          let temp = data.filter((item) => {
            return item.value !== "All";
          });
          setTechnicalContact(temp);
        } else if (data[data.length - 1].value === "All") {
          setTechnicalContact([{ label: "All", value: "All" }]);
        } else {
          setTechnicalContact(data);
        }
      } else {
        setTechnicalContact(data);
      }
    } else {
      setTechnicalContact([{ label: "All", value: "All" }]);
    }
  };

  const overAllStatusSetter = (data) => {
    if (data.length > 0) {
      if (data.length > 1) {
        if (data[0].value === "All") {
          let temp = data.filter((item) => {
            return item.value !== "All";
          });
          setOverAllStatus(temp);
        } else if (data[data.length - 1].value === "All") {
          setOverAllStatus([{ label: "All", value: "All" }]);
        } else {
          setOverAllStatus(data);
        }
      } else {
        setOverAllStatus(data);
      }
    } else {
      setOverAllStatus([{ label: "All", value: "All" }]);
    }
  };

  const customStyles = {
    control: (provided, state) => ({
      ...provided,
      background: "#fff",
      borderColor: "#9e9e9e",
      minHeight: "30px",
      height: "30px",
      boxShadow: state.isFocused ? null : null,
    }),

    valueContainer: (provided, state) => ({
      ...provided,
      height: "30px",
      padding: "0 6px",
    }),

    input: (provided, state) => ({
      ...provided,
      margin: "0px",
    }),
    indicatorSeparator: (state) => ({
      display: "none",
    }),
    indicatorsContainer: (provided, state) => ({
      ...provided,
      height: "30px",
    }),
  };

  const barColors = [
    // "#58508D",
    // "#7CB07C",
    // "#91A6B4",
    // "#9C640C",
    "#1F618D",
    "#641E16",
    // "#229954",
    "#0B5345",
    // "#7D3C98",
    "#4A235A",

    // "#F1C40F",
    // "#9C640C",
    // "#04E5BE",
    // "#67958D",
    // "#4A235A",
    "#820401",
    "#CC5500",
    // "#D55402",
    // "#CB4335",

    // "#67958D",
    // "#AF38EB",
    "#932963",
    "#E04194",
    "#04E5BE",
  ];

  const getUrl = (name) => {
    let url = "";
    switch (name) {
      case "EDN DCM Count":
        // url = "datacenters";
        break;
      case "Switches Count":
        // url = "racks";
        break;
      case "Not Connected Ports":
        // url = "devices";
        break;
      default:
        url = "";
    }
    return url;
  };

  const setBg = () => {
    const randomColor = Math.floor(Math.random() * 16777215).toString(16);
    return "#" + randomColor;
  };

  const getTopCards = () => {
    let topCards = [];
    cards.forEach((data, index) => {
      let backgroundColor = barColors[index % 7];
      let url = getUrl(data.name);
      topCards.push(
        <Col span={6} style={{ paddingBottom: "20px" }}>
          <div>
            <StyledCard
              style={{
                backgroundColor,
                height: "70px",
                borderBottomRightRadius: "0",
                borderBottomLeftRadius: "0",
                color: "white",
              }}
            >
              <div
                style={{
                  fontSize: "30px",
                  fontWeight: "bolder",
                  paddingTop: "10px",
                }}
              >
                {data.value}
              </div>
            </StyledCard>
            <StyledCard
              style={{
                color: "white",
                fontSize: "16px",
                backgroundColor,
                borderTopRightRadius: "0",
                borderTopLeftRadius: "0",
                paddingTop: "3px",
                opacity: "0.8",
                paddingBottom: "7px",
              }}
            >
              {data.name} &nbsp;{" "}
              {/* <Link style={{ color: "white" }} to={`${url}?domain=EdnNet`}> */}
              <ArrowRightOutlined />
              {/* </Link> */}
            </StyledCard>
          </div>
        </Col>
      );
    });
    return topCards;
  };

  return (
    <div
      style={{
        // background: "black",
        borderRadius: "10px",
        // border: "5px solid grey",
        marginBottom: "40px",
      }}
    >
      <StyledHeading>IGW Vulnerablity</StyledHeading>
      <Row>
        <Col span={24} style={{}}>
          {cards ? (
            <Row style={{ height: "100%", paddingBottom: "10px" }} gutter={20}>
              {getTopCards()}
            </Row>
          ) : (
            <div
              style={{
                textAlign: "center",
                // border: "1px solid black",
                height: "100%",
                paddingBottom: "30px",
              }}
            >
              <Spin tip="Loading Cards..." spinning={true} />
            </div>
          )}
        </Col>
      </Row>

      <Row gutter={24}>
        <Col
          span={24}
          style={{
            marginBottom: "20px",
          }}
        >
          <div>
            <StyledCard
              style={{
                color: "white",
                backgroundColor: "#009bdb",
                fontSize: "17px",
                borderBottomRightRadius: "0",
                borderBottomLeftRadius: "0",
                paddingTop: "6px",
                // opacity: "0.8",
                paddingBottom: "8px",
                fontWeight: "bold",
                // borderColor: "3px solid brown",
              }}
            >
              IGW Overall Status
            </StyledCard>
            <StyledCard
              style={{
                // backgroundColor,
                height: "55vh",
                borderTopRightRadius: "0",
                borderTopLeftRadius: "0",
              }}
            >
              {/* <SectionHeading mb="1rem" bg="#808080" style={{}}>
                Onboarded Devices out of Total Devices
              </SectionHeading> */}

              <ResponsiveContainer width="100%" height="100%">
                {overallStatus ? (
                  <PieChart>
                    <Legend />
                    <Tooltip
                      itemStyle={{ fontWeight: "bold", color: "grey" }}
                    />
                    <Pie
                      // onClick={(e) => handleClick(e)}
                      data={overallStatus}
                      cx="50%"
                      cy="50%"
                      isAnimationActive={false}
                      label={
                        <CustomPieChartLabel total={getTotal(overallStatus)} />
                      }
                      outerRadius={100}
                      dataKey="value"
                      minAngle={3}
                      labelLine={false}
                    >
                      {overallStatus.map((entry, index) => (
                        <Cell
                          key={`cell-${index}`}
                          fill={COLORS[(index + 2) % COLORS.length]}
                        />
                      ))}
                    </Pie>
                  </PieChart>
                ) : (
                  <div
                    style={{
                      textAlign: "center",
                      // border: "1px solid black",
                      height: "100%",
                      paddingTop: "13%",
                    }}
                  >
                    <Spin tip="Loading PieChart..." spinning={true} />
                  </div>
                )}
              </ResponsiveContainer>
            </StyledCard>
          </div>
        </Col>

        <Col
          span={24}
          style={{
            marginBottom: "20px",
          }}
        >
          <div>
            <StyledCard
              style={{
                color: "white",
                backgroundColor: "#009bdb",
                fontSize: "17px",
                // borderBottomRightRadius: "0",
                // borderBottomLeftRadius: "0",
                paddingTop: "6px",
                // opacity: "0.8",
                paddingBottom: "8px",
                fontWeight: "bold",
                // borderColor: "3px solid brown",
                display: "flex",
                justifyContent: "space-between",
              }}
            >
              Technical Contact:
              <div style={{ width: "35%", color: "grey", fontSize: "12px" }}>
                <MultiSelect
                  isMulti
                  styles={customStyles}
                  value={technicalContact}
                  onChange={(e) => technicalContactSetter(e)}
                  options={technicalContactOptions}
                />
              </div>
              Overall Status:
              <div style={{ width: "35%", color: "grey", fontSize: "12px" }}>
                <MultiSelect
                  isMulti
                  styles={customStyles}
                  value={overAllStatus}
                  onChange={(e) => overAllStatusSetter(e)}
                  options={overAllStatusOptions}
                />
              </div>
            </StyledCard>
          </div>
        </Col>

        <Col
          span={12}
          style={{
            marginBottom: "20px",
          }}
        >
          <div>
            <StyledCard
              style={{
                color: "white",
                backgroundColor: "#009bdb",
                fontSize: "17px",
                borderBottomRightRadius: "0",
                borderBottomLeftRadius: "0",
                paddingTop: "6px",
                // opacity: "0.8",
                paddingBottom: "8px",
                fontWeight: "bold",
                // borderColor: "3px solid brown",
              }}
            >
              IGW GRC Severity
            </StyledCard>
            <StyledCard
              style={{
                // backgroundColor,
                height: "55vh",
                borderTopRightRadius: "0",
                borderTopLeftRadius: "0",
              }}
            >
              <ResponsiveContainer width="100%" height="100%">
                {ednGrcSeverity ? (
                  <PieChart>
                    <Legend />
                    <Tooltip
                      itemStyle={{ fontWeight: "bold", color: "grey" }}
                    />
                    <Pie
                      data={ednGrcSeverity}
                      cx="50%"
                      cy="50%"
                      isAnimationActive={false}
                      label={
                        <CustomPieChartLabel total={getTotal(ednGrcSeverity)} />
                      }
                      outerRadius={100}
                      dataKey="value"
                      minAngle={3}
                      labelLine={false}
                    >
                      {ednGrcSeverity.map((entry, index) => (
                        <Cell
                          key={`cell-${index}`}
                          fill={COLORS[(index + 2) % COLORS.length]}
                        />
                      ))}
                    </Pie>
                  </PieChart>
                ) : (
                  <div
                    style={{
                      textAlign: "center",
                      // border: "1px solid black",
                      height: "100%",
                      paddingTop: "13%",
                    }}
                  >
                    <Spin tip="Loading PieChart..." spinning={true} />
                  </div>
                )}
              </ResponsiveContainer>
            </StyledCard>
          </div>
        </Col>

        <Col
          span={12}
          style={{
            marginBottom: "20px",
          }}
        >
          <div>
            <StyledCard
              style={{
                color: "white",
                backgroundColor: "#009bdb",
                fontSize: "17px",
                borderBottomRightRadius: "0",
                borderBottomLeftRadius: "0",
                paddingTop: "6px",
                // opacity: "0.8",
                paddingBottom: "8px",
                fontWeight: "bold",
                // borderColor: "3px solid brown",
              }}
            >
              IGW Vuln Fix Plan Status
            </StyledCard>
            <StyledCard
              style={{
                // backgroundColor,
                height: "55vh",
                borderTopRightRadius: "0",
                borderTopLeftRadius: "0",
              }}
            >
              <ResponsiveContainer width="100%" height="100%">
                {ednVulFixPlanStatus ? (
                  <PieChart>
                    <Legend />
                    <Tooltip
                      itemStyle={{ fontWeight: "bold", color: "grey" }}
                    />
                    <Pie
                      // onClick={(e) => handleClick(e)}
                      data={ednVulFixPlanStatus}
                      cx="50%"
                      cy="50%"
                      isAnimationActive={false}
                      label={
                        <CustomPieChartLabel
                          total={getTotal(ednVulFixPlanStatus)}
                        />
                      }
                      outerRadius={100}
                      dataKey="value"
                      minAngle={3}
                      labelLine={false}
                    >
                      {ednVulFixPlanStatus.map((entry, index) => (
                        <Cell
                          key={`cell-${index}`}
                          fill={COLORS[(index + 2) % COLORS.length]}
                        />
                      ))}
                    </Pie>
                  </PieChart>
                ) : (
                  <div
                    style={{
                      textAlign: "center",
                      // border: "1px solid black",
                      height: "100%",
                      paddingTop: "13%",
                    }}
                  >
                    <Spin tip="Loading PieChart..." spinning={true} />
                  </div>
                )}
              </ResponsiveContainer>
            </StyledCard>
          </div>
        </Col>

        <Col
          span={24}
          style={{
            marginBottom: "20px",
          }}
        >
          <div>
            <StyledCard
              style={{
                color: "white",
                fontSize: "18px",
                backgroundColor: "#009bdb",
                borderBottomRightRadius: "0",
                borderBottomLeftRadius: "0",
                paddingTop: "6px",
                // opacity: "0.8",
                paddingBottom: "8px",
                fontWeight: "bold",
                // borderColor: "3px solid brown",
              }}
            >
              GRC Severity VS Vuln Fix Plan Status
            </StyledCard>
            <StyledCard
              style={{
                // backgroundColor,
                height: "55vh",
                borderTopRightRadius: "0",
                borderTopLeftRadius: "0",
                paddingTop: "18px",
              }}
            >
              <SeverityStack
                barData={grcSeverityVsVulnFixPlanStatusData}
                dataKeys={grcSeverityVsVulnFixPlanStatusDataKeys}
              />
            </StyledCard>
          </div>
        </Col>

        <Col
          span={24}
          style={{
            marginBottom: "20px",
          }}
        >
          <div>
            <StyledCard
              style={{
                color: "white",
                fontSize: "18px",
                backgroundColor: "#009bdb",
                borderBottomRightRadius: "0",
                borderBottomLeftRadius: "0",
                paddingTop: "6px",
                // opacity: "0.8",
                paddingBottom: "8px",
                fontWeight: "bold",
                // borderColor: "3px solid brown",
              }}
            >
              GRC Severity VS Pn Code
            </StyledCard>
            <StyledCard
              style={{
                // backgroundColor,
                height: "55vh",
                borderTopRightRadius: "0",
                borderTopLeftRadius: "0",
                paddingTop: "18px",
              }}
            >
              <PnCodeStack
                barData={grcSeverityVsPNCodeData}
                dataKeys={grcSeverityVsPNCodeDataKeys}
              />
            </StyledCard>
          </div>
        </Col>
        <Col
          span={24}
          style={{
            marginBottom: "20px",
          }}
        >
          <LineGraph />
        </Col>
      </Row>
    </div>
  );
};

class CustomizedLabel extends PureComponent {
  render() {
    const { x, y, stroke, value } = this.props;

    return (
      <text x={x} y={y} dy={-4} fill={stroke} fontSize={10} textAnchor="middle">
        {value === 0 ? null : value}
      </text>
    );
  }
}

export default Index;

const StyledCard = styled.div`
  /* margin-top: -10px; */
  /* margin-bottom: 10px; */
  height: 100%;
  /* text-align: center; */
  background-color: white;
  border-radius: 10px;
  padding: 0px 20px 20px 20px;
  box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
`;

const StyledButton = styled(Button)`
  width: 15%;
  font-family: Montserrat-Regular;
  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
  background-color: ${(props) => props.color};
  border-color: ${(props) => props.color};
  color: white;
  border-radius: 5px;
  &:focus,
  &:hover {
    background-color: ${(props) => props.color};
    border-color: ${(props) => props.color};
    color: white;
    opacity: 0.8;
  }
`;

const StyledDefaultMessage = styled.span`
  width: 100%;
  height: 100%;
  text-align: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  font-size: 16px;
  font-weight: bolder;
  color: grey;
`;

const StyledSpan = styled.span`
  padding: 20px;
  font-size: 25px;
  font-weight: bolder;
`;

const SectionHeading = styled.h2`
  width: 70%;
  background-color: black;
  font-size: 15px;
  font-weight: 700;
  font-family: "Montserrat-Regular";
  margin-bottom: ${(p) => p.mb && p.mb};
  color: ${(p) => (p.bg ? "white" : "black")};
  padding: 7px;
`;
