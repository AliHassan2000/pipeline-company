import React, { useState } from "react";
import styled from "styled-components";
import { Row, Col, Modal, Input, Button, DatePicker } from "antd";
import axios, { baseUrl } from "../../../../../utils/axios";
import moment from "moment";

const AddDeviceModal = (props) => {
  const correctDatePattern = (date) => {
    if (date != null) {
      let d = date.split(date[10]);
      return d[0] + " " + d[1];
    } else return;
  };

  const getString = (str) => {
    return str ? str : "";
  };

  const getDateString = (dateStr) => {
    return dateStr; // ? correctDatePattern(dateStr) : "";
  };

  // const regex =
  //   "^[0-9]{4}-(0[1-9]|[1][012])-(0[1-9]|[12][0-9]|3[01]) ([0-1][0-9]|2[0123]):([0-5][0-9]):([0-5][0-9])$";
  const regex = "^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[1][012])-[0-9]{4}$";
  let [device, setDevice] = useState(props.editRecord);
  /////////////////////////////

  let [ip, setIp] = useState(
    device ? getString(device.vulnerability_overdue_id) : ""
  );
  let [scanResultId, setScanResultId] = useState(
    device ? getString(device.scan_result_id) : ""
  );
  let [deviceIp, setDeviceIp] = useState(
    device ? getString(device.device_ip) : ""
  );
  let [deviceName, setDeviceName] = useState(
    device ? getString(device.device_name) : ""
  );
  let [title, setTitle] = useState(device ? getString(device.title) : "");
  let [dueDate, setDueDate] = useState(
    device ? getString(device.due_date) : ""
  );
  let [falsePositiveDate, setFalsePositiveDate] = useState(
    device ? getString(device.false_positive_date) : ""
  );
  let [severity, setSeverity] = useState(
    device ? getString(device.severity) : ""
  );
  let [overallStatus, setOverallStatus] = useState(
    device ? getString(device.overall_status) : ""
  );
  let [qualysVulnStatus, setQualysVulnStatus] = useState(
    device ? getString(device.qualys_vuln_status) : ""
  );
  let [lastDetected, setLastDetected] = useState(
    device ? getString(device.last_detected) : ""
  );
  let [technicalContact, setTechnicalContact] = useState(
    device ? getString(device.technical_contact) : ""
  );
  let [exceptionRequests, setExceptionRequests] = useState(
    device ? getString(device.exception_requests) : ""
  );

  const postDevice = async (device) => {
    try {
      //console.log(device);
      await axios
        .post(baseUrl + "/editEdnVulnerabilityOverdue", device)
        .then(() => {
          const promises = [];
          promises.push(
            axios
              .get(baseUrl + "/getAllEdnVulnerabilityOverdue")
              .then((response) => {
                console.log(response.data);
                props.setDataSource(response.data);
                props.excelData = response.data;
              })
              .catch((error) => {
                console.log(error);
              })
          );
          return Promise.all(promises);
        })
        .catch((err) => {
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (dueDate && falsePositiveDate && lastDetected) {
      const device = {
        vulnerability_overdue_id: ip,
        scan_result_id: scanResultId,
        device_ip: deviceIp,
        device_name: deviceName,
        title,
        due_date: dueDate,
        false_positive_date: falsePositiveDate,
        severity,
        overall_status: overallStatus,
        qualys_vuln_status: qualysVulnStatus,
        last_detected: lastDetected,
        technical_contact: technicalContact,
        exception_requests: exceptionRequests,
      };

      props.setIsModalVisible(false);
      postDevice(device);
    } else {
      alert("Due Date, False Positive and Last Detected Date can not be empty");
    }
  };

  const handleCancel = () => {
    props.setIsModalVisible(false);
  };
  const onChange = (date, dateString) => {
    console.log(date, dateString);
    setDueDate(dateString);
  };
  const onChangeFalsePositiveDate = (date, dateString) => {
    console.log(date, dateString);
    setFalsePositiveDate(dateString);
  };
  const onChangeLastDetected = (date, dateString) => {
    console.log(date, dateString);
    setLastDetected(dateString);
  };
  return (
    <Modal
      style={{ marginTop: "20px", zIndex: "99999" }}
      width="60%"
      title=""
      closable={false}
      visible={props.isModalVisible}
      footer=""
    >
      <form onSubmit={handleSubmit}>
        <Row gutter={30}>
          <Col span={24} style={{ textAlign: "center" }}>
            <p style={{ fontSize: "22px" }}>{device ? "Edit" : "Add"} Record</p>
          </Col>
          <Col span={12}>
            {device ? (
              <InputWrapper>
                Scan Result Id:&nbsp;&nbsp;
                <StyledInput value={ip} readonly />
              </InputWrapper>
            ) : null}
            <InputWrapper>
              Device Ip:
              {/* &nbsp;<span style={{ color: "red" }}>*</span> */}
              &nbsp;&nbsp;
              <StyledInput
                value={deviceIp}
                onChange={(e) => setDeviceIp(e.target.value)}
                required
              />
            </InputWrapper>
            <InputWrapper>
              Device Name:
              {/* &nbsp;<span style={{ color: "red" }}>*</span> */}
              &nbsp;&nbsp;
              <StyledInput
                value={deviceName}
                onChange={(e) => setDeviceName(e.target.value)}
                required
              />
            </InputWrapper>
            <InputWrapper>
              Title:
              {/* &nbsp;<span style={{ color: "red" }}>*</span> */}
              &nbsp;&nbsp;
              <StyledInput
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                required
              />
            </InputWrapper>
            <InputWrapper>
              Due Date: &nbsp;&nbsp;
              {/* <StyledInput
                value={dueDate}
                onChange={(e) => setDueDate(e.target.value)}
                // required
              /> */}
              <DatePicker
                onChange={onChange}
                defaultValue={dueDate ? moment(dueDate, "DD-MM-YYYY") : null}
                style={{ width: "100%" }}
                format="DD-MM-YYYY"
              />
            </InputWrapper>
            <InputWrapper>
              False Positive Date: &nbsp;&nbsp;
              {/* <StyledInput
                value={falsePositiveDate}
                onChange={(e) => setFalsePositiveDate(e.target.value)}
              /> */}
              <DatePicker
                onChange={onChangeFalsePositiveDate}
                defaultValue={
                  falsePositiveDate
                    ? moment(falsePositiveDate, "DD-MM-YYYY")
                    : null
                }
                style={{ width: "100%" }}
                format="DD-MM-YYYY"
              />
            </InputWrapper>
          </Col>
          <Col span={12}>
            <InputWrapper>
              Severity: &nbsp;&nbsp;
              <StyledInput
                value={severity}
                onChange={(e) => setSeverity(e.target.value)}
                // required
              />
            </InputWrapper>
            <InputWrapper>
              Overall Status: &nbsp;&nbsp;
              <StyledInput
                value={overallStatus}
                onChange={(e) => setOverallStatus(e.target.value)}
                // required
              />
            </InputWrapper>
            <InputWrapper>
              Qualys Vuln Status: &nbsp;&nbsp;
              <StyledInput
                value={qualysVulnStatus}
                onChange={(e) => setQualysVulnStatus(e.target.value)}
              />
            </InputWrapper>
            <InputWrapper>
              Last Detected: &nbsp;&nbsp;
              {/* <StyledInput
                value={lastDetected}
                onChange={(e) => setLastDetected(e.target.value)}
              /> */}
              <DatePicker
                onChange={onChangeLastDetected}
                defaultValue={
                  lastDetected ? moment(lastDetected, "DD-MM-YYYY") : null
                }
                style={{ width: "100%" }}
                format="DD-MM-YYYY"
              />
            </InputWrapper>
            <InputWrapper>
              Technical Contact: &nbsp;&nbsp;
              <StyledInput
                value={technicalContact}
                onChange={(e) => setTechnicalContact(e.target.value)}
              />
            </InputWrapper>
            <InputWrapper>
              Exception Requests: &nbsp;&nbsp;
              <StyledInput
                value={exceptionRequests}
                onChange={(e) => setExceptionRequests(e.target.value)}
              />
            </InputWrapper>
          </Col>
          <Col span={24} style={{ textAlign: "center" }}>
            <br />
            <StyledButton color={"red"} onClick={handleCancel}>
              Cancel
            </StyledButton>
            &nbsp; &nbsp;{" "}
            <StyledSubmitButton color={"green"} type="submit" value="Done" />
          </Col>
        </Row>
      </form>
    </Modal>
  );
};

const StyledInput = styled(Input)`
  height: 1.6rem;
`;

const InputWrapper = styled.div`
  font-size: 12px;
  white-space: nowrap;
  display: flex;
  justify-content: space-between;
  padding-bottom: 10px;
`;

const StyledSubmitButton = styled(Input)`
  font-size: 11px;
  font-weight: bolder;
  width: 15%;
  font-family: Montserrat-Regular;
  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
  background-color: ${(props) => props.color};
  border-color: ${(props) => props.color};
  color: white;
  border-radius: 5px;
  &:focus,
  &:hover {
    background-color: ${(props) => props.color};
    border-color: ${(props) => props.color};
    color: white;
    opacity: 0.8;
  }
`;

const StyledButton = styled(Button)`
  height: 27px;
  font-size: 11px;
  font-weight: bolder;
  width: 15%;
  font-family: Montserrat-Regular;
  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
  background-color: ${(props) => props.color};
  border-color: ${(props) => props.color};
  color: white;
  border-radius: 5px;
  &:focus,
  &:hover {
    background-color: ${(props) => props.color};
    border-color: ${(props) => props.color};
    color: white;
    opacity: 0.8;
  }
`;

export default AddDeviceModal;
